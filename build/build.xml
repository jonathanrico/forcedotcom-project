<project name="sfbuild" default="deploy" basedir="." xmlns:sf="antlib:com.salesforce">
    <!-- Properties -->
    <property environment="env"/>
    <property name="build_props" value="sfdc-build.properties"/>
    <property file="${build_props}"/>
    <property name="destructive.dir" value="../build/destructive"/>
    <property name="src.dir" value="../src"/>
    <property name="staticres.src.dir" value="../static-resources"/>
    <property name="app.deploy.tmp.dir" value="../build/tmp/src"/>
    <property name="packageVersionTag" value="&lt;packageVersions&gt;"/>
    <property name="protocol" value="https"/>

    <!-- Set default value in property if not present -->
    <property name="checkOnly" value="true" />
    <property name="runAllTests" value="true" />
    <property name="sf.package.apiVersion" value="43.0" />

    <!-- Ant doesn't like < in replace tokens or values so set a property with < via cdata for reuse later -->
    <property name="lt"><![CDATA[<]]></property>

    <!-- Import additional macros-->
    <import file="${basedir}/tools/ant-salesforce.xml"/>

    <!-- Output timestamp -->
    <target name="timestamp">
        <tstamp prefix="start">
            <format property="touch.time" pattern="MM/dd/yyyy hh:mm aa" />
        </tstamp>
        <echo message="${start.touch.time}" />
    </target>

    <!-- Check if meta xml contains unnecessary version tags and throw exception if tag is found-->
    <target name="checkMetaHasPackageVersions">
        <fileset id="meta.file" dir="${src.dir}" includes="**/*meta.xml">
            <contains text="${packageVersionTag}"/>
        </fileset>
        <replaceregexp flags="g" match="\s*\&lt;packageVersions\&gt;[\s\S]*\&lt;\/packageVersions\&gt;" replace="">
            <fileset refid="meta.file"/>
        </replaceregexp>
    </target>

    <!-- Resolves password for target environment.  Read from properties file, if it's not available read it from prompt -->
    <target name="resolvePasswordForTargetEnv">
        <antcallback target="readPasswordFromPrompt" return="passwordFromPrompt">
            <param name="targetEnvFile" value="${build_props}"/>
        </antcallback>
        <condition property="targetPassword" value="${sf.target.password}">
            <and>
                <isset property="sf.target.password"/>
                <not>
                    <equals arg1="${sf.target.password}" arg2="" trim="true"/>
                </not>
            </and>
        </condition>
        <condition property="targetPassword" value="${passwordFromPrompt}">
            <isset property="passwordFromPrompt"/>
        </condition>
    </target>

    <!-- Read password from prompt  if it's not available in properties file -->
    <target name="readPasswordFromPrompt" unless="isPasswordPropertySet" depends="checkIfPasswordPropertyIsSet">
        <input message="Password for target org not found in ${targetEnvFile}.  Please enter password here>" addproperty="passwordFromPrompt">
            <handler classname="org.apache.tools.ant.input.SecureInputHandler" />
        </input>
    </target>

    <!-- Check if password was set in properties file -->
    <target name="checkIfPasswordPropertyIsSet">
        <condition property="isPasswordPropertySet" value="true">
            <and>
                <isset property="sf.target.password"/>
                <not>
                    <equals arg1="${sf.target.password}" arg2="" trim="true"/>
                </not>
            </and>
        </condition>
    </target>

    <!-- Update metadata info that changes from one environment to another-->
    <target name="updateMetadata">
        <echo message="Updating metadata..." />
        <!-- Task to replace profile specific user license settings -->
        <!-- <xmltask source="${src.dir}/dashboards/DASHBOARD_FOLDER/DASHBOARD_NAME.dashboard" dest="${src.dir}/dashboards/DASHBOARD_FOLDER/DASHBOARD_NAME.dashboard">
            <replace path="/*[local-name()='Dashboard']/*[local-name()='runningUser']/text()" withText="${sf.target.username}"/>
        </xmltask> -->
    </target>

    <target name="revertMetadataChanges">
        <echo message="Reverting metadata changes..." />
        <!-- Task to replace profile specific user license settings -->
        <!-- <xmltask source="${src.dir}/dashboards/DASHBOARD_FOLDER/DASHBOARD_NAME.dashboard" dest="${src.dir}/dashboards/DASHBOARD_FOLDER/DASHBOARD_NAME.dashboard">
            <replace path="/*[local-name()='Dashboard']/*[local-name()='runningUser']/text()" withText="{{RUNNING_USER}}"/>
        </xmltask> -->
    </target>

    <!-- Print target information -->
    <target name="printTargetInfo" >
        <echo message="Target Org Username : ${sf.target.username}"/>
    </target>

    <!-- Deploy the unpackaged set of metadata retrieved with retrieveUnpackaged -->
    <target name="deploy" depends="printTargetInfo,runTargetValidations,updateMetadata,create-static-res,resolvePasswordForTargetEnv,proxy">
        <echo message="Cleaning tmp dir ..."/>
        <delete dir="${app.deploy.tmp.dir}"/>
        <echo message="Copying src to tmp dir ..."/>
        <copy todir="${app.deploy.tmp.dir}">
            <fileset dir="${src.dir}" excludesfile="../.gitignore" />
        </copy>
        <echo message="Deploying : ${sf.target.username} ..."/>
        <sf:deploy username="${sf.target.username}" password="${sf.target.password}" serverurl="${sf.target.serverurl}"
        deployRoot="${app.deploy.tmp.dir}" checkOnly="${checkOnly}" logType="Debugonly" pollWaitMillis="2000"  maxPoll="500" runAllTests="false">
        </sf:deploy>
        <antcall target="revertMetadataChanges"/>
        <echo message="Cleaning tmp dir ..."/>
        <delete dir="${app.deploy.tmp.dir}"/>
    </target>

    <!-- Only Deploy destructive changes -->
    <target name="deploy-destructive" depends="printTargetInfo,runTargetValidations,timestamp,resolvePasswordForTargetEnv">
        <echo message="Deploying Destructive : ${sf.target.username} ..."/>
        <sf:deploy username="${sf.target.username}" password="${targetPassword}" serverurl="${sf.target.serverurl}"
        deployRoot="${destructive.dir}" checkOnly="${checkOnly}" logType="Debugonly" pollWaitMillis="2000"  maxPoll="500" runAllTests="false">
        </sf:deploy>
    </target>

    <!-- Deploy with destructive changes -->
    <target name="deploy-with-destructive-changes" depends="proxy">
        <antcall target="deploy"/>
        <antcall target="deploy-destructive"/>
    </target>

    <!-- Deploy Static Resources Only-->
    <target name="deploy-static-res" depends="create-static-res,proxy">
        <deploy-subset-package>
            <ss-elements>
                <copy todir="${app.deploy.tmp.dir}/staticresources">
                    <fileset dir="${src.dir}/staticresources"/>
                </copy>
                <echo file="${app.deploy.tmp.dir}/package.xml" append="true"><![CDATA[<types><members>*</members><name>StaticResource</name></types>]]></echo>
            </ss-elements>
        </deploy-subset-package>
    </target>

    <!-- Deploy Apex Only-->
    <target name="deploy-apex" depends="proxy">
        <deploy-subset-package>
            <ss-elements>
                <copy todir="${app.deploy.tmp.dir}/classes">
                    <fileset dir="${src.dir}/classes"/>
                </copy>
                <echo file="${app.deploy.tmp.dir}/package.xml" append="true"><![CDATA[<types><members>*</members><name>ApexClass</name></types>]]></echo>
                <copy todir="${app.deploy.tmp.dir}/triggers">
                    <fileset dir="${src.dir}/triggers"/>
                </copy>
                <echo file="${app.deploy.tmp.dir}/package.xml" append="true"><![CDATA[<types><members>*</members><name>ApexTrigger</name></types>]]></echo>
            </ss-elements>
        </deploy-subset-package>
    </target>

    <!-- Deploy Visualforce Only-->
    <target name="deploy-visualforce" depends="proxy">
        <deploy-subset-package>
            <ss-elements>
                <copy todir="${app.deploy.tmp.dir}/pages">
                    <fileset dir="${src.dir}/pages"/>
                </copy>
                <echo file="${app.deploy.tmp.dir}/package.xml" append="true"><![CDATA[<types><members>*</members><name>ApexPage</name></types>]]></echo>
            </ss-elements>
        </deploy-subset-package>
    </target>

    <!-- Deploy Single File -->
    <target name="deploy-single-file" depends="proxy">
        <deploy-subset-package>
            <ss-elements>
                <echo message="${deploy.single.folderName} / ${deploy.single.subFolderName} / ${deploy.single.fileName} / ${deploy.single.metadataType}" />
                <if>
                    <isset property="deploy.single.subFolderName"/>
                    <then>
                        <if>
                            <equals arg1="${deploy.single.metadataType}" arg2="AuraDefinitionBundle"/>
                            <then>
                                <echo message="Processing aura bundle..."/>
                                <copy todir="${app.deploy.tmp.dir}/${deploy.single.folderName}/${deploy.single.subFolderName}">
                                    <fileset dir="${src.dir}/${deploy.single.folderName}/${deploy.single.subFolderName}"/>
                                </copy>
                                <echo file="${app.deploy.tmp.dir}/package.xml" append="true"><![CDATA[<types><members>${deploy.single.subFolderName}</members><name>${deploy.single.metadataType}</name></types>]]></echo>
                            </then>
                            <else>
                                <echo message="Processing sub-folders..."/>
                                <copy todir="${app.deploy.tmp.dir}/${deploy.single.folderName}/${deploy.single.subFolderName}">
                                    <fileset dir="${src.dir}/${deploy.single.folderName}/${deploy.single.subFolderName}" >
                                        <include name="${deploy.single.fileName}.*" />
                                        <include name="${deploy.single.fileName}.*-meta.xml" />
                                    </fileset>
                                </copy>
                                <echo file="${app.deploy.tmp.dir}/package.xml" append="true"><![CDATA[<types><members>${deploy.single.subFolderName}</members><members>${deploy.single.subFolderName}/${deploy.single.fileName}</members><name>${deploy.single.metadataType}</name></types>]]></echo>
                            </else>
                        </if>
                    </then>
                    <else>
                        <copy todir="${app.deploy.tmp.dir}/${deploy.single.folderName}/">
                            <fileset dir="${src.dir}/${deploy.single.folderName}" >
                                <include name="${deploy.single.fileName}.*" />
                                <include name="${deploy.single.fileName}.*-meta.xml" />
                            </fileset>
                        </copy>
                        <echo file="${app.deploy.tmp.dir}/package.xml" append="true"><![CDATA[<types><members>${deploy.single.fileName}</members><name>${deploy.single.metadataType}</name></types>]]></echo>
                    </else>
                </if>
            </ss-elements>
        </deploy-subset-package>
    </target>

    <!-- Retrieve Single File -->
    <target name="retrieve-single-file" depends="proxy">
        <retrieve-unpackaged-subset-package>
            <ss-elements>
                <echo message="${retrieve.single.folderName} / ${retrieve.single.subFolderName} / ${retrieve.single.fileName} / ${retrieve.single.metadataType}" />
                <if>
                    <isset property="retrieve.single.subFolderName"/>
                    <then>
                        <if>
                            <equals arg1="${retrieve.single.metadataType}" arg2="AuraDefinitionBundle"/>
                            <then>
                                <echo message="Processing aura bundle..."/>
                                <echo file="${app.deploy.tmp.dir}/package.xml" append="true"><![CDATA[<types><members>${retrieve.single.subFolderName}</members><name>${retrieve.single.metadataType}</name></types>]]></echo>
                            </then>
                            <else>
                                <echo message="Processing sub-folders..."/>
                                <echo file="${app.deploy.tmp.dir}/package.xml" append="true"><![CDATA[<types><members>${retrieve.single.subFolderName}</members><members>${retrieve.single.subFolderName}/${retrieve.single.fileName}</members><name>${retrieve.single.metadataType}</name></types>]]></echo>
                            </else>
                        </if>
                    </then>
                    <else>
                        <echo file="${app.deploy.tmp.dir}/package.xml" append="true"><![CDATA[<types><members>${retrieve.single.fileName}</members><name>${retrieve.single.metadataType}</name></types>]]></echo>
                    </else>
                </if>
            </ss-elements>
        </retrieve-unpackaged-subset-package>
    </target>

    <!-- Deploy several files -->
    <target name="deploy-several-files">
        <deploy-subset-package>
            <ss-elements>
                <several-files-script optype="deploy" />
            </ss-elements>
        </deploy-subset-package>
    </target>

    <!-- Retrieve several files -->
    <target name="retrieve-several-files">
        <retrieve-unpackaged-subset-package>
            <ss-elements>
                <several-files-script optype="retrieve" />
            </ss-elements>
        </retrieve-unpackaged-subset-package>
    </target>

    <!-- Deploy metadata from the tmp directory -->
    <target name="deploy-subset" depends="printTargetInfo,runTargetValidations,checkMetaHasPackageVersions,proxy">
        <echo message="Subset Deployment : ${sf.target.username} ..."/>
        <sf:deploy username="${sf.target.username}" password="${sf.target.password}" serverurl="${sf.target.serverurl}"
                deployRoot="${app.deploy.tmp.dir}" logType="Debugonly" pollWaitMillis="2000"  maxPoll="500" runAllTests="${runAllTests}">
        </sf:deploy>
    </target>

    <!-- Create static resource zip file from exploded directory structure -->
    <target name="create-static-res" depends="checkMetaHasPackageVersions">
        <dirset id="dist.contents" dir="../static-resources" includes="static-resources *"/>
        <property name="prop.dist.contents" refid="dist.contents"/>
        <for list="${prop.dist.contents}" delimiter=";" param="val">
            <sequential>
                <echo message="Processing @{val} static resource ..."/>
                <delete file="${src.dir}/staticresources/@{val}.resource"/>
                <zip destfile="${src.dir}/staticresources/@{val}.resource" basedir="${staticres.src.dir}/@{val}" />
            </sequential>
        </for>
    </target>

    <!-- Run target validations to prevent unintended deployments to production -->
    <target name="runTargetValidations" >
        <if>
            <isset property="sf.target.prodOrg.ids"/>
            <then>
                <executeSOQLSingle username="${sf.target.username}" password="${sf.target.password}" serverurl="${sf.target.serverurl}" protocol="${protocol}">Select Id from Organization</executeSOQLSingle>
                <echo message="Target Org Id : ${soqlRecord.Id}"/>
                <condition property="is-prod-org">
                    <matches pattern="(${sf.target.prodOrg.ids})" string="${soqlRecord.Id}"/>
                </condition>
                <if>
                    <equals arg1="${is-prod-org}" arg2="true"/>
                    <then>
                        <input
                            message="You're building against a production org. Do you wish to continue?"
                            validargs="y,n"
                            addproperty="do.delete"
                          />
                          <condition property="do.abort">
                            <equals arg1="n" arg2="${do.delete}"/>
                          </condition>
                          <fail if="do.abort">Build aborted by user.</fail>
                    </then>
                    <else>
                        <echo message="Ok to continue with deployment..." />
                    </else>
                </if>
            </then>
            <else>
                <echo message="Ok to continue with deployment, no production checks have been defined..." />
            </else>
        </if>
    </target>

    <!-- Retrieve unpackaged metadata -->
    <target name="retrieve">
        <antcall target="retrieve-unpackaged"/>
    </target>

    <!-- Retrieve the contents listed in the file app/package.xml into the app directory -->
    <target name="retrieve-unpackaged" depends="printTargetInfo,proxy">
        <echo message="Retrieving Unpackaged : ${sf.target.username} ..."/>
        <sf:retrieve username="${sf.target.username}" password="${sf.target.password}" serverurl="${sf.target.serverurl}" retrieveTarget="${src.dir}" unpackaged="${src.dir}/package.xml"/>
    </target>

    <!-- Retrieve metadata from the tmp directory -->
    <target name="retrieve-unpackaged-subset" depends="printTargetInfo,proxy">
        <echo message="Retrieving Unpackaged Subset : ${sf.target.username} ..."/>
        <sf:retrieve username="${sf.target.username}" password="${sf.target.password}" serverurl="${sf.target.serverurl}" retrieveTarget="${src.dir}" unpackaged="${app.deploy.tmp.dir}/package.xml" />
    </target>

    <!-- Proxy (if set in properties) -->
    <target name="proxy">
        <if>
            <isset property="proxy.host" />
            <then>
                <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}" proxyuser="${proxy.user}" proxypassword="${proxy.pass}"/>
            </then>
        </if>
    </target>

    <!-- Script definition for several files deploy/retrieve -->
    <scriptdef name="several-files-script" language="javascript">
        <attribute name="optype"/>
        <![CDATA[
            try {
                load("nashorn:mozilla_compat.js");
            } catch (e) {}
            importClass(java.io.File);
            function getTask(taskName) {
                return self.getProject().createTask(taskName);
            }
            function getProperty(propName) {
                return self.getProject().getProperty(propName);
            }
            function taskEcho(str, dirFile, nameFile){
                var echo = getTask("echo");
                echo.setMessage(str);
                var instFile = null;
                if (nameFile) {
                    instFile = new File(dirFile, nameFile);
                    echo.setFile(instFile);
                    echo.setAppend(true);
                }
                echo.perform();
            }
            function writeItemToPackage(metaDataType, item, packageDir, packageName){
                if (typeof item === 'object') {
                    writeItemToPackage(metaDataType, item["subfld"], packageDir, packageName);
                    item["files"].forEach(function(fileItem){
                        writeItemToPackage(metaDataType, item["subfld"] + "/" + fileItem, packageDir, packageName);
                    });
                } else {
                    taskEcho(metaDataType + " / " + item);
                    taskEcho("<members>" + item + "</members>", packageDir, packageName);
                }
            }
            function writeItemsToPackage(metaDataType, items, packageDir, packageName){
                if (items.length == 1) {
                    writeItemToPackage(metaDataType, items[0], packageDir, packageName);
                } else if (items.length > 1) {
                    items.forEach(function(item) {
                        writeItemToPackage(metaDataType, item, packageDir, packageName);
                    });
                }
            }
            function copyToDir(srcDir, toDir, fileMask){
                var fs = project.createDataType("fileset");
                fs.setDir(new File(srcDir));
                if (fileMask) {
                    fs.createInclude().setName(fileMask);
                }
                var taskCopy = getTask("copy");
                taskCopy.addFileset(fs);
                taskCopy.setTodir(new File(toDir));
                taskCopy.perform();
            }
            function copySrcItemToTmp(mainDir, item, srcDir, tmpDir){
                if (typeof item === 'object') {
                    item["files"].forEach(function(fileItem){
                        taskEcho("Perform files for subfolder " + mainDir + " / " + item["subfld"] + " / " + fileItem);
                        copyToDir(
                            srcDir + "/" + mainDir + "/" + item["subfld"],
                            tmpDir + "/" + mainDir + "/" + item["subfld"],
                            fileItem + ".*"
                        );
                    });
                } else {
                    if (mainDir == "aura") {
                        taskEcho("Perform bundle files for " + mainDir + " / " + item);
                        copyToDir(srcDir + "/" + mainDir + "/" + item, tmpDir + "/" + mainDir + "/" + item);
                    } else {
                        taskEcho("Perform files for " + mainDir + " / " + item);
                        copyToDir(srcDir + "/" + mainDir, tmpDir + "/" + mainDir, item + ".*");
                    }
                }
            }
            function copySrcItemsToTmp(mainDir, items, srcDir, tmpDir){
                if (items.length == 1) {
                    copySrcItemToTmp(mainDir, items[0], srcDir, tmpDir);
                } else if (items.length > 1) {
                    items.forEach(function(item) {
                        copySrcItemToTmp(mainDir, item, srcDir, tmpDir);
                    });
                }
            }
            tmpDir = getProperty("basedir") + "/" + getProperty("app.deploy.tmp.dir");
            srcDir = getProperty("basedir") + "/" + getProperty("src.dir");
            jsonParse = eval("(" + getProperty( attributes.get("optype") + ".several.json") + ")");
            Object.keys(jsonParse).forEach(function(key) {
                taskEcho("<types>", tmpDir, "package.xml");
                writeItemsToPackage(key, jsonParse[key].items, tmpDir, "package.xml");
                if( attributes.get("optype") == "deploy" ){
                    copySrcItemsToTmp(jsonParse[key].fld, jsonParse[key].items, srcDir, tmpDir);
                }
                taskEcho("<name>" + key + "</name></types>", tmpDir, "package.xml");
            });
        ]]>
    </scriptdef>

</project>
